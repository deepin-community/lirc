From: Debian Lirc Team <team+debian-lirc@tracker.debian.org>
Date: Thu, 12 May 2022 21:07:56 +0200
Subject: lirc-gpio-ir-0.10

Origin: https://github.com/neuralassembly/raspi/blob/master/lirc-gpio-ir-0.10.patch
Bug-Debian: bugs.debian.org/931078
---
 lib/config_file.c    |  2 +-
 lib/ir_remote.h      |  9 +++++++--
 lib/irrecord.c       | 41 +++++++++++++++++++++++++++--------------
 lib/lirc/ir_remote.h |  9 +++++++--
 tools/mode2.cpp      | 18 +++++++++++++++---
 5 files changed, 57 insertions(+), 22 deletions(-)

diff --git a/lib/config_file.c b/lib/config_file.c
index 104e4f9..a8500c0 100644
--- a/lib/config_file.c
+++ b/lib/config_file.c
@@ -71,7 +71,7 @@ struct void_array {
 typedef void* (*array_guest_func)(void* item, void* arg);
 
 
-#define LINE_LEN 1024
+#define LINE_LEN 4096
 #define MAX_INCLUDES 10
 
 const char* whitespace = " \t";
diff --git a/lib/ir_remote.h b/lib/ir_remote.h
index 94e4db4..0ca9ee6 100644
--- a/lib/ir_remote.h
+++ b/lib/ir_remote.h
@@ -110,12 +110,17 @@ static inline ir_code reverse(ir_code data, int bits)
 
 static inline int is_pulse(lirc_t data)
 {
-	return data & PULSE_BIT ? 1 : 0;
+	return ((data & LIRC_MODE2_MASK)==LIRC_MODE2_PULSE) ? 1 : 0;
 }
 
 static inline int is_space(lirc_t data)
 {
-	return !is_pulse(data);
+	return ((data & LIRC_MODE2_MASK)==LIRC_MODE2_SPACE) ? 1 : 0;
+}
+
+static inline int is_timeout(lirc_t data)
+{
+	return ((data & LIRC_MODE2_MASK)==LIRC_MODE2_TIMEOUT) ? 1 : 0;
 }
 
 static inline int has_repeat(const struct ir_remote* remote)
diff --git a/lib/irrecord.c b/lib/irrecord.c
index a7b461c..cf3c6b5 100644
--- a/lib/irrecord.c
+++ b/lib/irrecord.c
@@ -1398,9 +1398,16 @@ enum lengths_status get_lengths(struct lengths_state* state,
 		state->retval = 0;
 		return STS_LEN_TIMEOUT;
 	}
+	if (is_timeout(state->data)) {
+		return STS_LEN_AGAIN;
+	}
 	state->count++;
 	if (state->mode == MODE_GET_GAP) {
-		state->sum += state->data & PULSE_MASK;
+		if (state->sum != 0 || is_pulse(state->data)) {
+			state->sum += state->data & PULSE_MASK;
+		}else{
+			return STS_LEN_AGAIN;
+		}
 		if (state->average == 0 && is_space(state->data)) {
 			if (state->data > 100000) {
 				state->sum = 0;
@@ -1472,6 +1479,10 @@ enum lengths_status get_lengths(struct lengths_state* state,
 		state->keypresses = lastmaxcount;
 		return STS_LEN_AGAIN;
 	} else if (state->mode == MODE_HAVE_GAP) {
+		if (state->count==1 && is_space(state->data))  {
+			state->count = 0;
+			return STS_LEN_AGAIN;
+		}
 		if (state->count <= MAX_SIGNALS) {
 			signals[state->count - 1] = state->data & PULSE_MASK;
 		} else {
@@ -1510,7 +1521,7 @@ enum lengths_status get_lengths(struct lengths_state* state,
 			/* such long pulses may appear with
 			 * crappy hardware (receiver? / remote?)
 			 */
-			else {
+			else if(is_pulse(state->data)) {
 				remote->gap = 0;
 				return STS_LEN_NO_GAP_FOUND;
 			}
@@ -1811,22 +1822,24 @@ ssize_t raw_read(void* buffer, size_t size, unsigned int timeout_us)
 
 static int raw_data_ok(struct button_state* btn_state)
 {
-	int r;
+	int r = 0;
 	int ref;
 
-	if (!is_space(btn_state->data)) {
+	if (is_pulse(btn_state->data)) {
 		r = 0;
-	} else if (is_const(&remote)) {
-		if (remote.gap > btn_state->sum) {
-			ref = (remote.gap - btn_state->sum);
-			ref *= (100 - remote.eps);
-			ref /= 100;
+	} else if (is_space(btn_state->data)) {
+		if (is_const(&remote)) {
+			if (remote.gap > btn_state->sum) {
+				ref = (remote.gap - btn_state->sum);
+				ref *= (100 - remote.eps);
+				ref /= 100;
+			} else {
+				ref = 0;
+			}
+			r = btn_state->data > ref;
 		} else {
-			ref = 0;
+			r = btn_state->data > (remote.gap * (100 - remote.eps)) / 100;
 		}
-		r = btn_state->data > ref;
-	} else {
-		r = btn_state->data > (remote.gap * (100 - remote.eps)) / 100;
 	}
 	return r;
 }
@@ -1970,7 +1983,7 @@ enum button_status record_buttons(struct button_state*	btn_state,
 				btn_state->data = remote.gap;
 			}
 			if (btn_state->count == 0) {
-				if (!is_space(btn_state->data)
+				if (is_pulse(btn_state->data)
 				    || btn_state->data <
 				    remote.gap - remote.gap * remote.eps /
 				    100) {
diff --git a/lib/lirc/ir_remote.h b/lib/lirc/ir_remote.h
index 94e4db4..0ca9ee6 100644
--- a/lib/lirc/ir_remote.h
+++ b/lib/lirc/ir_remote.h
@@ -110,12 +110,17 @@ static inline ir_code reverse(ir_code data, int bits)
 
 static inline int is_pulse(lirc_t data)
 {
-	return data & PULSE_BIT ? 1 : 0;
+	return ((data & LIRC_MODE2_MASK)==LIRC_MODE2_PULSE) ? 1 : 0;
 }
 
 static inline int is_space(lirc_t data)
 {
-	return !is_pulse(data);
+	return ((data & LIRC_MODE2_MASK)==LIRC_MODE2_SPACE) ? 1 : 0;
+}
+
+static inline int is_timeout(lirc_t data)
+{
+	return ((data & LIRC_MODE2_MASK)==LIRC_MODE2_TIMEOUT) ? 1 : 0;
 }
 
 static inline int has_repeat(const struct ir_remote* remote)
diff --git a/tools/mode2.cpp b/tools/mode2.cpp
index e962610..716ff0a 100644
--- a/tools/mode2.cpp
+++ b/tools/mode2.cpp
@@ -326,12 +326,24 @@ unsigned int get_codelength(int fd, int use_raw_access)
 void print_mode2_data(unsigned int data)
 {
 	static int bitno = 1;
+	static bool leading_space = true;
+	unsigned int msg = data & LIRC_MODE2_MASK;
 
 	switch (opt_dmode) {
 	case 0:
-		printf("%s %u\n", (
-			       data & PULSE_BIT) ? "pulse" : "space",
-		       (uint32_t)(data & PULSE_MASK));
+		if (leading_space && msg == LIRC_MODE2_SPACE ) {
+			break;
+		} else {
+			leading_space = false;
+		}
+		if (msg == LIRC_MODE2_PULSE) {
+			printf("pulse %u\n", (__u32)(data & PULSE_MASK));
+		} else if (msg == LIRC_MODE2_SPACE) {
+			printf("space %u\n", (__u32)(data & PULSE_MASK));
+		} else if (msg == LIRC_MODE2_TIMEOUT) {
+			printf("timeout %u\n", (__u32)(data & PULSE_MASK));
+			leading_space = true;
+		}
 		break;
 	case 1: {
 		/* print output like irrecord raw config file data */
